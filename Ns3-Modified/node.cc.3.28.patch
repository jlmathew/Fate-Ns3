--- node.cc.orig	2018-09-13 16:43:57.258920788 -0700
+++ node.cc	2018-09-13 16:53:07.291932115 -0700
@@ -31,6 +31,7 @@
 #include "ns3/assert.h"
 #include "ns3/global-value.h"
 #include "ns3/boolean.h"
+#include "ns3/fate-ipv4protocol.h"
 
 namespace ns3 {
 
@@ -77,7 +78,9 @@
 
 Node::Node()
   : m_id (0),
-    m_sid (0)
+    m_sid (0),
+    m_fateHandler(0),
+    m_fateExists(false)
 {
   NS_LOG_FUNCTION (this);
   Construct ();
@@ -85,7 +88,9 @@
 
 Node::Node(uint32_t sid)
   : m_id (0),
-    m_sid (sid)
+    m_sid (sid),
+    m_fateHandler(0),
+    m_fateExists(false)
 { 
   NS_LOG_FUNCTION (this << sid);
   Construct ();
@@ -222,6 +227,12 @@
 
   Object::DoInitialize ();
 }
+void
+Node::RegisterFateProtocolHandler (FateHandler handler)
+{
+    m_fateHandler= handler;
+    m_fateExists = true;
+}
 
 void
 Node::RegisterProtocolHandler (ProtocolHandler handler, 
@@ -309,6 +320,24 @@
                         << device->GetIfIndex () << " (type=" << device->GetInstanceTypeId ().GetName ()
                         << ") Packet UID " << packet->GetUid ());
   bool found = false;
+//FATE
+  Ptr<Packet> packet2 = 0;
+      if(m_fateExists) {
+//std::cout << " Pre convert original pkt:";
+//packet->Print(std::cout);
+//std::cout << "\n";
+
+          uint32_t ms = packet->GetSerializedSize();
+          std::vector<uint8_t> pktvect(ms);
+          packet->Serialize((uint8_t *) &pktvect[0], ms);
+
+          m_fateHandler (device, pktvect, protocol, from, to, packetType, promiscuous); //fateprotocol
+
+         packet2 = Create<Packet>((uint8_t *) &pktvect[0],pktvect.size(), true);
+//std::cout << " Post convert original pkt:";
+//packet2->Print(std::cout);
+//std::cout << "\n\n";
+      } else { packet2 = packet->Copy(); }
 
   for (ProtocolHandlerList::iterator i = m_handlers.begin ();
        i != m_handlers.end (); i++)
@@ -321,7 +350,7 @@
             {
               if (promiscuous == i->promiscuous)
                 {
-                  i->handler (device, packet, protocol, from, to, packetType);
+                  i->handler (device, packet2, protocol, from, to, packetType);
                   found = true;
                 }
             }
